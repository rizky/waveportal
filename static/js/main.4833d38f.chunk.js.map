{"version":3,"sources":["App.tsx","index.js"],"names":["getEthereumObject","window","ethereum","findMetaMaskAccount","a","async","console","error","log","request","method","accounts","length","account","App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractAddress","contractABI","abi","getAllWaves","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","map","wave","waver","timestamp","Date","message","useEffect","onNewWave","prevState","on","off","className","onClick","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","alert","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4833d38f.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/accessible-emoji */\nimport { BigNumber, ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { WavePortal } from \"./types/WavePortal\";\nimport abi from \"./utils/WavePortal.json\";\n\nconst getEthereumObject = () => window.ethereum;\n\n/*\n * This function returns the first linked account found.\n * If there is no account linked, it will return null.\n */\nconst findMetaMaskAccount = async () => {\n  try {\n    const ethereum = getEthereumObject();\n\n    /*\n     * First make sure we have access to the Ethereum object.\n     */\n    if (!ethereum) {\n      console.error(\"Make sure you have Metamask!\");\n      return null;\n    }\n\n    console.log(\"We have the Ethereum object\", ethereum);\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      return account;\n    } else {\n      console.error(\"No authorized account found\");\n      return null;\n    }\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState<WavePortal.WaveStruct[]>([]);\n\n  const contractAddress = \"0xab233A1a68CD8C03Bb62D68Bc84f6F4a02Bcd609\";\n  const contractABI = abi.abi;\n\n  const getAllWaves = async () => {\n    const { ethereum } = window;\n  \n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer)  as WavePortal;\n        const waves = await wavePortalContract.getAllWaves();\n  \n        const wavesCleaned: WavePortal.WaveStruct[] = waves.map((wave) => {\n          return {\n            waver: wave.waver,\n            timestamp: new Date(wave.timestamp as unknown as number * 1000) as unknown as BigNumber,\n            message: wave.message,\n          };\n        });\n  \n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const ethereum = getEthereumObject();\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        /*\n        * Execute the actual wave from your smart contract\n        */\n        const waveTxn = await wavePortalContract.wave(\"This is a message\", { gasLimit: 300000 });\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        getAllWaves();\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /*\n   * This runs our function when the page loads.\n   * More technically, when the App component \"mounts\".\n   */\n  useEffect(() => {\n    (async () => {\n    const account = await findMetaMaskAccount();\n    if (account !== null) {\n      setCurrentAccount(account);\n      getAllWaves();\n    }\n  })();\n  }, []);\n\n  /**\n * Listen in for emitter events!\n */\nuseEffect(() => {\n  let wavePortalContract: WavePortal;\n\n  const onNewWave = (waver: string, timestamp: number, message: string) => {\n    console.log(\"NewWave\", waver, timestamp, message);\n    setAllWaves(prevState => [\n      ...prevState,\n      {\n        waver,\n        timestamp: new Date(timestamp * 1000) as unknown as BigNumber,\n        message: message,\n      },\n    ]);\n  };\n\n  if (window.ethereum) {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n\n    wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer) as WavePortal;;\n    wavePortalContract.on(\"NewWave\", onNewWave);\n  }\n\n  return () => {\n    if (wavePortalContract) {\n      wavePortalContract.off(\"NewWave\", onNewWave);\n    }\n  };\n}, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          ðŸ‘‹ Hey there!\n        </div>\n\n        <div className=\"bio\">\n          Hello I am Riz? Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n\n        {/*\n         * If there is no currentAccount render this button\n         */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {wave.waver}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>)\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}