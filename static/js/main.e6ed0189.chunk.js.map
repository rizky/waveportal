{"version":3,"sources":["App.tsx","index.js"],"names":["getEthereumObject","window","ethereum","findMetaMaskAccount","a","async","console","error","log","request","method","accounts","length","account","App","useState","currentAccount","setCurrentAccount","contractABI","abi","useEffect","className","onClick","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","wave","waveTxn","hash","wait","alert","ReactDOM","render","document","getElementById"],"mappings":"m6QAMMA,EAAoB,kBAAMC,OAAOC,UAMjCC,EAAsB,8BAAAC,EAAAC,OAAA,4DAElBH,EAAWF,IAFO,uBAQtBM,QAAQC,MAAM,gCARQ,kBASf,MATe,cAYxBD,QAAQE,IAAI,8BAA+BN,GAZnB,WAAAE,EAAA,MAaDF,EAASO,QAAQ,CAAEC,OAAQ,kBAb1B,UAeA,KAFlBC,EAbkB,QAeXC,OAfW,wBAgBhBC,EAAUF,EAAS,GACzBL,QAAQE,IAAI,+BAAgCK,GAjBtB,kBAkBfA,GAlBe,eAoBtBP,QAAQC,MAAM,+BApBQ,kBAqBf,MArBe,iEAwBxBD,QAAQC,MAAR,MAxBwB,kBAyBjB,MAzBiB,0DA6HbO,EAhGH,WAAO,IAAD,EAC4BC,mBAAS,IADrC,mBACTC,EADS,KACOC,EADP,KAGVC,EAAcC,EAAIA,IAiExB,OATAC,qBAAU,YACR,WAAC,QAAAhB,EAAAC,OAAA,kEAAAD,EAAA,MACqBD,KADrB,OAEe,QADVU,EADL,SAGCI,EAAkBJ,GAHnB,qCAAD,KAMC,IAGD,yBAAKQ,UAAU,iBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UAAf,2BAIA,yBAAKA,UAAU,OAAf,gEAIA,4BAAQA,UAAU,aAAaC,QAvDxB,sCAAAlB,EAAAC,OAAA,8DAEYJ,SAAbC,EAFC,EAEDA,UAFC,wBAKDqB,EAAW,IAAIC,IAAOC,UAAUC,aAAaxB,GAC7CyB,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SA7BpB,6CA6B8CZ,EAAaS,GAPtE,WAAAvB,EAAA,MASWyB,EAAmBE,iBAT9B,cASHC,EATG,OAUP1B,QAAQE,IAAI,gCAAiCwB,EAAMC,YAV5C,YAAA7B,EAAA,MAeeyB,EAAmBK,QAflC,eAeDC,EAfC,OAgBP7B,QAAQE,IAAI,YAAa2B,EAAQC,MAhB1B,YAAAhC,EAAA,MAkBD+B,EAAQE,QAlBP,eAmBP/B,QAAQE,IAAI,YAAa2B,EAAQC,MAnB1B,YAAAhC,EAAA,MAqBOyB,EAAmBE,iBArB1B,QAqBPC,EArBO,OAsBP1B,QAAQE,IAAI,gCAAiCwB,EAAMC,YAtB5C,wBAwBP3B,QAAQE,IAAI,kCAxBL,0DA2BTF,QAAQE,IAAR,MA3BS,2DAuDP,eAOEQ,GACA,4BAAQK,UAAU,aAAaC,QAlFjB,4BAAAlB,EAAAC,OAAA,4DAEZH,EAAWF,IAFC,uBAIhBsC,MAAM,iBAJU,4CAAAlC,EAAA,MAQKF,EAASO,QAAQ,CACtCC,OAAQ,yBATQ,OAQZC,EARY,OAYlBL,QAAQE,IAAI,YAAaG,EAAS,IAClCM,EAAkBN,EAAS,IAbT,kDAelBL,QAAQC,MAAR,MAfkB,2DAkFd,qBC3HVgC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e6ed0189.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/accessible-emoji */\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport abi from \"./utils/WavePortal.json\";\n\nconst getEthereumObject = () => window.ethereum;\n\n/*\n * This function returns the first linked account found.\n * If there is no account linked, it will return null.\n */\nconst findMetaMaskAccount = async () => {\n  try {\n    const ethereum = getEthereumObject();\n\n    /*\n     * First make sure we have access to the Ethereum object.\n     */\n    if (!ethereum) {\n      console.error(\"Make sure you have Metamask!\");\n      return null;\n    }\n\n    console.log(\"We have the Ethereum object\", ethereum);\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      return account;\n    } else {\n      console.error(\"No authorized account found\");\n      return null;\n    }\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const contractAddress = \"0x5bce133B6C4217E990DED22C00688F03Bb5540A5\";\n  const contractABI = abi.abi;\n\n  const connectWallet = async () => {\n    try {\n      const ethereum = getEthereumObject();\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        /*\n        * Execute the actual wave from your smart contract\n        */\n        const waveTxn = await wavePortalContract.wave();\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /*\n   * This runs our function when the page loads.\n   * More technically, when the App component \"mounts\".\n   */\n  useEffect(() => {\n    (async () => {\n    const account = await findMetaMaskAccount();\n    if (account !== null) {\n      setCurrentAccount(account);\n    }\n  })();\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          ðŸ‘‹ Hey there!\n        </div>\n\n        <div className=\"bio\">\n          Hello I am Riz? Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n\n        {/*\n         * If there is no currentAccount render this button\n         */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}