{"version":3,"sources":["App.tsx","index.js"],"names":["getEthereumObject","window","ethereum","findMetaMaskAccount","a","async","console","error","log","request","method","accounts","length","account","App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractABI","abi","getAllWaves","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","waver","timestamp","Date","message","useEffect","className","onClick","getTotalWaves","count","toNumber","waveTxn","hash","wait","alert","map","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2789ca8d.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/accessible-emoji */\nimport { BigNumber, ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { WavePortal } from \"./types/WavePortal\";\nimport abi from \"./utils/WavePortal.json\";\n\nconst getEthereumObject = () => window.ethereum;\n\n/*\n * This function returns the first linked account found.\n * If there is no account linked, it will return null.\n */\nconst findMetaMaskAccount = async () => {\n  try {\n    const ethereum = getEthereumObject();\n\n    /*\n     * First make sure we have access to the Ethereum object.\n     */\n    if (!ethereum) {\n      console.error(\"Make sure you have Metamask!\");\n      return null;\n    }\n\n    console.log(\"We have the Ethereum object\", ethereum);\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      return account;\n    } else {\n      console.error(\"No authorized account found\");\n      return null;\n    }\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState<WavePortal.WaveStruct[]>([]);\n\n  const contractAddress = \"0x4d933f548B520A2b51872a577000e33FB0f64eE8\";\n  const contractABI = abi.abi;\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer) as WavePortal;\n\n        /*\n         * Call the getAllWaves method from your Smart Contract\n         */\n        const waves = await wavePortalContract.getAllWaves();\n\n        console.log({ waves })\n        /*\n         * We only need address, timestamp, and message in our UI so let's\n         * pick those out\n         */\n        let wavesCleaned: WavePortal.WaveStruct[] = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            waver: wave.waver,\n            timestamp: new Date(wave.timestamp as unknown as number * 1000) as unknown as BigNumber,\n            message: wave.message\n          });\n        });\n\n        /*\n         * Store our data in React State\n         */\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const ethereum = getEthereumObject();\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        /*\n        * Execute the actual wave from your smart contract\n        */\n        const waveTxn = await wavePortalContract.wave(\"This is a message\");\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        getAllWaves();\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /*\n   * This runs our function when the page loads.\n   * More technically, when the App component \"mounts\".\n   */\n  useEffect(() => {\n    (async () => {\n    const account = await findMetaMaskAccount();\n    if (account !== null) {\n      setCurrentAccount(account);\n      getAllWaves();\n    }\n  })();\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          ðŸ‘‹ Hey there!\n        </div>\n\n        <div className=\"bio\">\n          Hello I am Riz? Connect your Ethereum wallet and wave at me!\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n\n        {/*\n         * If there is no currentAccount render this button\n         */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {wave.waver}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>)\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}